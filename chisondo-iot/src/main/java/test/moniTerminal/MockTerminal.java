package test.moniTerminal;

import com.alibaba.fastjson.JSONObject;
import com.chisondo.iot.common.constant.Constant;
import com.chisondo.iot.device.request.DevStatusReportReq;
import com.chisondo.model.http.resp.DevStatusMsgResp;

import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.util.CharsetUtil;
import test.CountHelper;

/**
 * 客户端
 *
 * @author ding.zhong
 * @version V1.0
 * @date 2017年12月29日
 */
public class MockTerminal {
    private static EventLoopGroup work = new NioEventLoopGroup();

    private static Bootstrap config() {
        //客户这边只需要创建一个线程组
        Bootstrap bootstrap = new Bootstrap();
        bootstrap.group(work)
                .channel(NioSocketChannel.class)
                .option(ChannelOption.SO_KEEPALIVE, true)
                .option(ChannelOption.SO_SNDBUF, 32 * 1024)
                .option(ChannelOption.SO_RCVBUF, 32 * 1024)

                //这里方法名与服务端不一样，其他一致
                .handler(new ChannelInitializer<SocketChannel>() {

                    @Override
                    protected void initChannel(SocketChannel sc) throws Exception {
                        sc.pipeline().addLast(new StringDecoder(CharsetUtil.UTF_8));
                        sc.pipeline().addLast(new MockTerminalHandler());
                    }
                });
        return bootstrap;
    }

    private static void startClient(Bootstrap bootstrap, String deviceId) throws InterruptedException {
        //服务端是绑定到服务器某个端口就行，但是客户端是需要连接到指定ip+指定端口的 因此方法不一样
        ChannelFuture channelFuture = bootstrap.connect("127.0.0.1", 16888).sync();
        int count = 0;
        while (channelFuture.channel().isActive()) {
            // 只要与服务端连接，就上报设备信息
            String msg = getDevStatusInfo(deviceId);
            channelFuture.channel().writeAndFlush(Unpooled.copiedBuffer(msg + "\n", CharsetUtil.UTF_8));
            Thread.sleep(5000);
                    /*if (++count > 0) {
                        break;
                    }*/
        }
        /*channelFuture.channel().closeFuture().sync();
        work.shutdownGracefully();*/
    }

    private static String getDevStatusInfo(String deviceId) {
        DevStatusReportReq reportReq = new DevStatusReportReq();
        reportReq.setAction("statuspush");
        reportReq.setActionFlag(Constant.DevStatus.HEART_BEAT);
        reportReq.setDeviceID(deviceId); // "32839884"
        DevStatusMsgResp msg = new DevStatusMsgResp();
        msg.setWorkstatus(Constant.WorkStatus.MAKING_TEA);
        msg.setWarmstatus(Constant.WarmStatus.KEEPING_WARM);
        msg.setTaststatus(Constant.ConcentrationStatus.MIDDLE);
        msg.setTemperature(70);
        msg.setSoak(100);
        msg.setWaterlevel(150);
        msg.setRemaintime(580);
        msg.setErrorstatus(Constant.ErrorStatus.NORMAL);
        msg.setNowwarm(65);
        reportReq.setMsg(msg);
        return JSONObject.toJSONString(reportReq);
    }

    public static void main(String[] args) throws InterruptedException {
        String[] deviceIds = getDeviceIds();
        mockClientDev("1234超级设备".split(","));
        //System.out.println(getDevStatusInfo("18170964"));
    }

    /**
     * 模拟终端启动
     */
    public static void mockClientDev(String[] deviceIds) {
        final Bootstrap bootstrap = config();
        for (int i = 0; i < deviceIds.length; i++) {
            String deviceId = deviceIds[i];
            new Thread(() -> {
                System.out.println("设备[" + deviceId + "]连接到TCP服务");
                try {
                    startClient(bootstrap, deviceId);//阻塞运行 需要开线程启动
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
        }
    }

    private static String[] getDeviceIds() {
        String[] deviceIds = "123456789,16777217,16848432,17045285,17045585,17045793,17045833,17047825,17048599,17048631,17048854,17048865,17057559,17057858,17060115,17060161,17060674,17114425,17127734,17174581,17184049,17187363,17188135,17966389,17967175,17977655,17978945,18024741,18024755,18036545,18170658,18170964,18171145,18171168,18171191,18235670,18240038,18243649,18351233,18359824,18360086,18360327,18360401,18360406,18360594,18421784,18421811,18424850,18427972,18891329,18948438,18948935,18949906,18949928,18957864,19079527,19141444,19159090,19206182,19206677,19206723,19207734,19216152,19220038,19341671,19664696,19664712,19664754,19664768,19664771,19664772,19664773,19664774,19664775,19664776,19664777,19664778,19664779,19664780,19664781,19664782,19664784,19664789,19664790,19664793,19867359,19867361,19867363,19867364,19867368,19867373,19867381,19867390,19867392,19867393,19867399,19867402,19867403,19867407,19867420,19867425,19867428,19867436,19867441,19867442,19867444,19867445,19867446,19867450,19867454,19867456,19867463,19867469,19867470,19867473,19867475,19867480,19867482,19867487,19867488,19867491,19867492,19867498,19867503,19867518,19867522,19867527,19867529,19867540,19867542,19867543,19867546,19867555,19867556,19867563,19867568,19867569,19867570,19867573,19867575,19867577,19867580,19867582,19867584,19867585,19867586,19867588,19867602,19867606,19867612,19867616,19867618,19867619,19867622,19867623,19867624,19867630,19867634,19867640,19867650,19867653,19867654,19867656,19867659,19867660,19867661,19867671,19867674,19867675,19867679,19867680,19867685,19867695,19867697,19867700,19867702,19867705,19867707,19867709,19867711,19867712,19867714,19867716,19867719,19867725,19867726,19867727,19867739,19867747,19867748,19867750,19867751,19867757,19867759,19867760,19867769,19867772,19867784,19867787,19867788,19867791,19867795,19867797,19867801,19867815,19867826,19867837,19867843,19867845,19867853,19867859,19867867,19867869,19867877,19867878,19867880,19867883,19867887,19867892,19867897,19867905,19867907,19867908,19867909,19867920,19867922,19867923,19867933,19867935,19867946,19867949,19867960,19867963,19867965,19867966,19867971,19867994,19867996,19868006,19868008,19868013,19868021,19868023,19868026,19868032,19868041,19868045,19868051,19868063,19868070,19868080,19868081,19868096,19868103,19868128,19868134,19868142,19868145,19868150,19868156,19868159,19868165,19868173,19868177,19868191,19868192,19868203,19868220,19868222,19868231,19868236,19868237,19868242,19868247,19868249,19868256,19868258,19868262,19868263,19868267,19868269,19868271,19868275,19868278,19868281,19868284,19868286,19868287,19868289,19868292,19868294,19868297,19868298,19868301,19868302,19868305,19868311,19868313,19868321,19868323,19868324,19868330,19868335,19868338,19868339,19868341,19868342,19868345,19868353,19868356,19868372,19868374,19868375,19868377,19868390,19868394,19868398,19868405,19868411,19868413,19868415,19868420,19868424,19868433,19868434,19868446,19868447,19868450,19868451,19868452,19868454,19868456,19868458,19868461,19868464,19868472,19868475,19868479,19868481,19868487,19868489,19868490,19868496,19868503,19868505,19868513,19868515,19868516,19868520,19868527,19868532,19868533,19868534,19868539,19868548,19868549,19868552,19868555,19868564,19868566,19868572,19868576,19868577,19868578,19868583,19868587,19868591,19868603,19868606,19868607,19868614,19868618,19868620,19868624,19868633,19868640,19868644,19868647,19868652,19868659,19868662,19868666,19868672,19868675,19868680,19868682,19868684,19868691,19868693,19868696,19868697,19868706,19868708,19868710,19868715,19868717,19868723,19868724,19868728,19868731,19868733,19868753,19868755,19868756,19868759,19868761,19868763,19868764,19868766,19868771,19868780,19868781,19868783,19868794,19868797,19868798,19868802,19868808,19868810,19868812,19868825,19868828,19868830,19868833,19868839,19868842,19868843,19868847,19868850,19868851,19868859,19868864,19868866,19868869,19868882,19868884,19868885,19868888,19868889,19868890,19868892,19868900,19868901,19868906,19868908,19868911,19868914,19868917,19868921,19868923,19868924,19868928,19868934,19868937,19868939,19868953,19868964,19868965,19868974,19868975,19868976,19868978,19868986,19868987,19868994,19868995,19868998,19869000,19869004,19869014,19869016,19869019,19869021,19869027,19869029,19869035,19869042,19869043,19869045,19869048,19869054,19869060,19869061,19869062,19869063,19869064,19869066,19869079,19869082,19869086,19869088,19869089,19869090,19869091,19869097,19869098,19869100,19869103,19869106,19869107,19869109,19869112,19869115,19869116,19869122,19869123,19869125,19869127,19869130,19869133,19869146,19869149,19869150,19869151,19869152,19869157,19869158,19869162,19869163,19869167,19869174,19869175,19869177,19869179,19869180,19869187,19869189,19869190,19869191,19869194,19869196,19869203,19869205,19869207,19869210,19869211,19869214,19869215,19869218,19869221,19869222,19869225,19869236,19869244,19869246,19869247,19869252,19869253,19869254,19869264,19869266,19869274,19869277,19869280,19869284,19869289,19869291,19869294,19869300,19869303,19869304,19869313,19869316,19869321,19869323,19869327,19869329,19869333,19869335,19869339,19869341,19869343,19869344,19869345,19869347,19869348,19869349,19869350,19869351,19869354,19869356,19869362,19869363,19869367,19869368,19869387,19869395,19869397,19869401,19869403,19869406,19869408,19869409,19869415,19869419,19869424,19869430,19869431,19869433,19869434,19869435,19869436,19871119,19889381,19894467,19894554,19894566,19894593,19894600,19894613,19894624,19894627,19894632,19894678,19894680,19894687,19894723,19894743,19894764,19894795,19894817,19894818,19894863,19894885,19894922,19894953,19894957,19894978,19895003,19895011,19895013,19895033,19895039,19895047,19895048,19895106,19895107,19895114,19895133,19895251,19895267,19895310,19895347,19895350,19895371,19895425,19895466,19895474,19895548,19895560,19895591,19895602,19895603,19895623,19895649,19895666,19895667,19895692,19895723,19895724,19895754,19895776,19895777,19895783,19895784,19895816,19895819,19895832,19895840,19895872,19895884,19895885,19895888,19895958,19895963,19895971,19895985,19895997,19896019,19896029,19896035,19896124,19896130,19896136,19896173,19896211,19896220,19896263,19896303,19896311,19896317,19896335,19896342,19896349,19896359,19896365,19896380,19896385,19896395,19896402,19896425,19896488,19896503,19896506,19905711,19915385,19915658,19918645,19923254,19923255,19923258,19923284,19923328,19923393,19923438,19923523,19923527,19923568,19923677,19923753,19923944,19924002,19924008,19924009,19924015,19924046,19924060,19924102,19924111,19924223,19924236,19924250,19924273,19924283,19924342,19924346,19924348,19924360,19924388,19924399,19924502,19924525,19924602,19924612,19924692,19924700,19924839,19924860,19924863,19924906,19924970,19924971,19924977,19924978,19924988,19925007,19925103,19925122,19925128,19925137,22315122,23527255,23723860,23854929,23854935,23920465,23920468,23986001,23986004,23986007,24051537,24051540,24117073,24182615,24248145,24248151,24313681,24313684,24379217,24444753,24444756,24510292,25187409,25956225,25956226,27004805,27096707,27096708,32839884,32839889,32839921,32839924,32839954,32839955,32839974,32839991,32840009,32840014,32840033,32840065,32840092,32840105,32840115,32840132,32840137,32840149,32840174,32840202,32840220,32840233,32840234,32840236,32840260,32840282,32840285,32840288,32840291,32840309,32840371,32840372,32840376,32840378,32840380,32840383,32840385,32840403,32840425,32840434,32840447,32840496,32840509,32840515,32840517,32840520,32840521,32840530,32840531,32840556,32840564,32840566,32840581,32840588,32840600,32840601,32840644,32840653,32840656,32840659,32840660,32840662,32840668,32840683,32840699,32840750,32840755,32840771,32840804,32840806,32840823,32840826,32840828,32840829,32840846,32840847,32840849,32840854,32840906,32840910,32840915,32840924,32840928,32840938,32840950,32840987,32840988,32840996,32841027,32841038,32841047,32841061,32841074,32841079,32841086,32841087,32841096,32841105,32841134,32841165,32841189,32841194,32841200,32841206,32841209,32841218,32841242,32841293,32841294,32841298,32841334,32841344,32841346,32841370,32841378,32841384,32841385,32841393,32841408,32841409,32841413,32841483,32841484,32841486,32841489,32841554,32841560,32841561,32841568,32841609,32841624,32841650,32841678,32841692,32841708,32841709,32841714,32841726,32841763,32841773,32841781,32841792,32841797,32841808,32841819,32841842,32841850,32841857,32841865,32841891,32841898,32841899,32841900,32841915,32841924,32841944,32841946,32841948,32841949,32841988,32842006,32842026,32842036,32842046,32842049,32842052,32842059,32842063,32842070,32842081,32842083,32842088,32842089,32842182,32842186,32842212,32842215,32842217,32842222,32842229,32842245,32842249,32842252,32842269,32842271,32842289,32842311,32842313,32842318,32842319,32842329,32842345,32842364,32842369,32842370,32842373,32842376,32842377,32842391,32842394,32842406,32842407,32842413,32842419,32842420,32842422,32842423,32842431,32842439,32842451,32842454,32842457".split(",");
        return deviceIds;
    }
}
